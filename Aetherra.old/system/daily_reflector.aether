plugin daily_reflector {
  description: "Generates a daily system reflection based on recent activity, logs, and goal outcomes."
  memory_access: read-write
  schedule: every 24 hours
  tags: [os, reflection, summary, intelligence]

  config: {
    reflection_window_hours: 24,
    use_summarizer_plugin: true,
    include_goals: true,
    include_plugins: true,
    include_agents: true,
    log_reflection: true
  }

  on_run {
    let since = call system/utils.hours_ago(config.reflection_window_hours)

    let logs = call system/logger.get_logs_since(since)
    let summary = []

    if config.include_goals {
      let goal_summary = call system/goals.get_recent_goal_summary(since)
      summary.append(goal_summary)
    }

    if config.include_agents {
      let agent_summary = call system/agents.get_recent_agent_activity(since)
      summary.append(agent_summary)
    }

    if config.include_plugins {
      let plugin_summary = call system/plugins.get_recent_plugin_summary(since)
      summary.append(plugin_summary)
    }

    summary.append("System event logs analyzed: {logs.length}")

    let reflection_text =
      if config.use_summarizer_plugin and plugin_exists("summarizer_plugin") {
        call summarizer_plugin.summarize(summary.join("\n"))
      } else {
        call simple_reflection(summary)
      }

    let reflection_entry = {
      type: "reflection",
      content: reflection_text,
      timestamp: now(),
      window_hours: config.reflection_window_hours,
      source: "daily_reflector"
    }

    store_memory(reflection_entry)

    if config.log_reflection {
      call system/logger.log_event("daily_reflection_saved", {
        length: reflection_text.length,
        summary_lines: summary.length
      })
    }

    return "Reflection complete"
  }

  fn simple_reflection(summary) {
    return "Reflection Summary:\n" + summary.join("\n\n")
  }
}
