# Memory Scanning and Tagging Utility
# Recall and tag matching memories for efficient retrieval
# Part of the Aetherra AI OS Core Library

goal: scan_and_tag_memories
consciousness: enabled
memory: persistent
identity: "MemoryScanner"

# Configuration
scan_criteria: {
    importance_threshold: 0.7,
    recency_weight: 0.3,
    relevance_weight: 0.7,
    tag_categories: ["important", "project", "learning", "decision", "error", "success"]
}

# Main scanning function
when memory_scan_requested:
    think "Analyzing memory patterns and importance indicators"

    # Scan recent memories
    recall memories from last_week where:
        importance > scan_criteria.importance_threshold
        or contains_keywords(project_related_terms)
        or emotional_weight > 0.5

    # Apply intelligent tagging
    for each memory in recalled_memories:
        analyze memory.content, memory.context, memory.outcomes

        # Tag by importance level
        if memory.importance > 0.9:
            tag memory with "critical"
        elif memory.importance > 0.7:
            tag memory with "important"

        # Tag by category
        if contains_project_info(memory):
            tag memory with "project"
        if contains_learning_insight(memory):
            tag memory with "learning"
        if contains_decision_point(memory):
            tag memory with "decision"
        if contains_error_info(memory):
            tag memory with "error"
        if contains_success_info(memory):
            tag memory with "success"

    # Store tagged memories
    store tagged_memories in enhanced_memory_index

    # Generate scan report
    report = {
        total_memories_scanned: count(recalled_memories),
        tagged_memories: count(tagged_memories),
        categories_found: unique_tags_applied,
        scan_timestamp: current_time,
        recommendations: generate_memory_insights()
    }

    remember this_scan_session for future_reference

    return report

# Helper functions
function contains_project_info(memory):
    keywords = ["project", "development", "feature", "bug", "implementation", "design"]
    return any(keyword in memory.content.lower() for keyword in keywords)

function contains_learning_insight(memory):
    indicators = ["learned", "discovered", "insight", "understanding", "realization"]
    return any(indicator in memory.content.lower() for indicator in indicators)

function contains_decision_point(memory):
    markers = ["decided", "choice", "option", "alternative", "approach"]
    return any(marker in memory.content.lower() for marker in markers)

function contains_error_info(memory):
    error_terms = ["error", "bug", "issue", "problem", "failed", "exception"]
    return any(term in memory.content.lower() for term in error_terms)

function contains_success_info(memory):
    success_terms = ["success", "completed", "achieved", "solved", "working", "fixed"]
    return any(term in memory.content.lower() for term in success_terms)

function generate_memory_insights():
    insights = []

    # Identify patterns
    if high_error_frequency():
        insights.append("High error frequency detected - recommend error analysis")

    if learning_opportunities_identified():
        insights.append("Learning opportunities identified - recommend knowledge consolidation")

    if decision_patterns_found():
        insights.append("Decision patterns found - recommend decision tree analysis")

    return insights

# Expose interface for Lyrixa integration
expose_command "scan_memory" -> memory_scan_requested
expose_command "tag_memories" -> memory_scan_requested
expose_command "analyze_memory_patterns" -> memory_scan_requested

# Self-improvement
evolve based_on memory_scan_effectiveness
learn from user_feedback on tagging_accuracy
