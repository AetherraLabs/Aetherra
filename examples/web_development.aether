# üåê Web Development with NeuroCode
# Build a modern web application using AI-native programming

# Set development goals
goal: create secure web application priority: critical
goal: implement user authentication priority: high
goal: ensure responsive design priority: medium
goal: optimize for performance priority: medium

# Activate development agent
agent: on specialization: "web_development"

# Store web development best practices
remember("Always validate user input") as "security_principle"
remember("Progressive enhancement improves accessibility") as "design_principle"
remember("API rate limiting prevents abuse") as "performance_principle"

# Define application requirements
requirements: |
  - User registration and login
  - Dashboard with data visualization
  - Real-time notifications
  - Mobile-responsive design
  - RESTful API endpoints
  - Secure data handling
|

# Architecture planning
analyze "application requirements" suggest "optimal architecture"
suggest "technology stack" for "modern web application"
suggest "security measures" for "user data protection"

# Development workflow
when requirements_defined:
    generate: database_schema
    design: api_endpoints
    create: authentication_system
    implement: user_interface
end

# Security implementation
implement: "input validation middleware"
implement: "JWT token authentication" 
implement: "password hashing with bcrypt"
implement: "HTTPS enforcement"
implement: "CORS configuration"

# Database design
design: user_table with "secure password storage"
design: session_table for "token management"
design: audit_log for "security monitoring"

# API development
create_endpoint: "POST /api/auth/register"
create_endpoint: "POST /api/auth/login"
create_endpoint: "GET /api/user/profile"
create_endpoint: "PUT /api/user/update"

# Frontend implementation
create: responsive_layout using "CSS Grid and Flexbox"
implement: "form validation with real-time feedback"
add: "loading states and error handling"
implement: "accessibility features"

# Testing strategy
test: "unit tests for all API endpoints"
test: "integration tests for authentication flow"
test: "security penetration testing"
test: "performance load testing"

# Deployment preparation
optimize: "bundle size for production"
configure: "environment variables for different stages"
setup: "CI/CD pipeline for automated deployment"
implement: "monitoring and logging"

# Performance optimization
optimize: "database queries with indexing"
implement: "caching strategy with Redis"
optimize: "frontend assets with compression"
implement: "CDN for static content delivery"

# Monitor and learn
monitor: "application performance metrics"
track: "user behavior and engagement"
analyze: "security logs for threats"
suggest: "improvements based on usage patterns"

# Store development insights
remember("Security should be built in, not bolted on") as "dev_wisdom"
remember("User experience drives application success") as "ux_insight"
reflect on "web development process effectiveness"
