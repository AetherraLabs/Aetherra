# Advanced Syntax Demo for Lyrixa
# Demonstrates the new user-defined functions, loops, conditionals, and simulation features

# ==== 1. USER-DEFINED FUNCTIONS ====

# Define a simple function to optimize network performance
define optimize_network()
    learn from "network.log"
    optimize for "latency"
    remember("Network optimization completed") as "maintenance"
end

# Define a function with parameters for system health checks
define system_health_check(component)
    remember("Checking " + component) as "monitoring"
    if memory.pattern("error", frequency="daily")
        suggest fix for component + " errors"
    else
        remember(component + " is healthy") as "status"
    end
end

# Define a data analysis function
define analyze_logs(log_pattern)
    for file in ["day1.log", "day2.log", "day3.log"]
        learn from file
        detect recurring patterns min_frequency=2
    end
    pattern frequency log_pattern
    remember("Log analysis complete for " + log_pattern) as "analysis"
end

# ==== 2. LOOPS AND ITERATION ====

# For loop with file processing
for log_file in ["access.log", "error.log", "debug.log"]
    learn from log_file
    remember("Processed " + log_file) as "file_processing"
end

# For loop with numeric range
for i in 1..5
    remember("Iteration " + i) as "counting"
end

# For loop with memory analysis
for tag in ["errors", "warnings", "performance"]
    pattern frequency tag timeframe=7
    if memory.pattern(tag, frequency="daily")
        suggest fix for tag + " issues"
    end
end

# While loop for monitoring
monitoring_active = true
iteration = 0
while monitoring_active == true and iteration < 10
    iteration = iteration + 1
    autonomous monitoring
    if memory.pattern("system_stable", frequency="hourly")
        monitoring_active = false
    end
    remember("Monitoring iteration " + iteration) as "monitoring_loop"
end

# ==== 3. CONDITIONALS ====

# Simple if-else for error handling
if memory.pattern("critical_error", frequency="daily")
    agent: on
    goal: resolve critical errors priority: high
    meta: system_optimizer emergency_mode
else
    remember("System stable, no critical errors") as "status"
    agent: off
end

# Complex conditional with multiple patterns
if memory.pattern("api_limit", frequency="hourly")
    optimize for "rate_limiting"
    remember("API rate limiting applied") as "optimization"
else
    if memory.pattern("slow_response", frequency="daily")
        optimize for "performance"
        remember("Performance optimization applied") as "optimization"
    else
        remember("System performance is optimal") as "status"
    end
end

# Conditional with goal checking
check_performance = true
if check_performance == true
    goal: maintain performance > 95%
    reflective loop
    if memory.pattern("performance_degradation")
        run system_health_check("performance")
    end
end

# ==== 4. SIMULATION MODE ====

# Simulate a complete system optimization workflow
simulate agent for 24h
    goal: optimize system performance priority: high
    agent: on

    for component in ["cpu", "memory", "disk", "network"]
        run system_health_check(component)

        if memory.pattern(component + "_issue", frequency="daily")
            suggest fix for component + " optimization"
            optimize for component + " performance"
        end
    end

    autonomous monitoring
    reflective loop
    meta: autonomous_improver full_scan
end

# Simulate emergency response protocol
simulate emergency_response
    if memory.pattern("critical_failure")
        agent: on
        goal: restore system stability priority: critical

        for system in ["database", "api", "frontend", "backend"]
            backup system + "_config"
            analyze system + "_logs"
            suggest fix for system + " issues"
        end

        meta: system_optimizer emergency_mode
        remember("Emergency protocol executed") as "emergency"
    end
end

# Simulate learning from multiple data sources
simulate data_learning_pipeline
    data_sources = ["logs", "metrics", "events", "alerts"]

    for source in data_sources
        learn from source + ".json"
        detect recurring patterns min_frequency=3 timeframe=7

        patterns_found = pattern frequency "anomaly" timeframe=7
        if patterns_found > 5
            run analyze_logs("anomaly")
            suggest fix for "anomaly detection"
        end
    end

    remember("Data learning pipeline simulation complete") as "simulation"
end

# ==== 5. ADVANCED COMBINATIONS ====

# Complex workflow combining all features
define advanced_system_maintenance()
    remember("Starting advanced maintenance workflow") as "maintenance"

    # Phase 1: Data Collection
    for data_type in ["performance", "errors", "usage"]
        learn from data_type + "_metrics.json"
        pattern frequency data_type timeframe=30
    end

    # Phase 2: Analysis and Decision Making
    critical_issues = 0
    for issue_type in ["memory_leak", "disk_full", "high_cpu"]
        if memory.pattern(issue_type, frequency="daily")
            critical_issues = critical_issues + 1
            suggest fix for issue_type
        end
    end

    # Phase 3: Conditional Response
    if critical_issues > 2
        agent: on
        goal: resolve critical system issues priority: high

        while critical_issues > 0
            autonomous monitoring
            meta: system_optimizer aggressive_mode
            critical_issues = critical_issues - 1
            remember("Resolved critical issue") as "resolution"
        end
    else
        remember("System health is acceptable") as "status"
        run optimize_network()
    end

    # Phase 4: Reporting and Memory Update
    reflective loop
    remember("Advanced maintenance completed") as "maintenance"
end

# Execute the advanced workflow
run advanced_system_maintenance()

# ==== 6. INTEGRATION WITH EXISTING FEATURES ====

# Combine with self-editing capabilities
define code_quality_check(filename)
    load filename
    analyze filename
    refactor filename "code_quality"

    if memory.pattern("refactor_success")
        remember("Code quality improved for " + filename) as "code_quality"
    else
        remember("Manual review needed for " + filename) as "manual_review"
    end
end

# Combine with meta-plugins
define comprehensive_analysis()
    meta: memory_analyzer detailed_scan
    meta: system_optimizer performance_check
    meta: goal_tracker analyze

    for plugin_result in ["memory_health", "system_performance", "goal_progress"]
        if memory.pattern(plugin_result + "_issue")
            suggest fix for plugin_result
        end
    end
end

# Combine with goal system
define goal_driven_optimization()
    goal: achieve 99% uptime priority: high metrics: uptime=99,response_time=100
    agent: on

    monitoring_cycles = 0
    while monitoring_cycles < 24 and goal_progress < 95
        autonomous monitoring
        reflective loop
        monitoring_cycles = monitoring_cycles + 1

        if memory.pattern("downtime", frequency="hourly")
            run system_health_check("availability")
            optimize for "uptime"
        end
    end

    check goal
    remember("Goal-driven optimization cycle completed") as "goal_optimization"
end

# Execute comprehensive demos
run comprehensive_analysis()
run goal_driven_optimization()

# Memory and pattern analysis
detect recurring patterns min_frequency=2 timeframe=1
memory summary
goal status
