# Goal Autopilot - Flagship .aether Script
# Automatically monitors, resumes, retries, and escalates incomplete or stalled goals
# Acts as a background cognitive loop that keeps the OS moving toward its intentions

plugin goal_autopilot {
    description: "Monitors and auto-resumes incomplete goals. Escalates or logs stalled goals."
    memory_access: read-write
    schedule: every 30 minutes
    tags: [os, goals, recovery, automation, flagship]
    
    # Configuration parameters
    config: {
        retry_delay_minutes: 10,
        escalation_threshold_hours: 1,
        max_retry_attempts: 3,
        plugin_health_check: true,
        log_all_actions: true
    }
    
    # Main execution function
    on_run {
        log "🚀 Goal Autopilot starting scan..."
        
        # Get all incomplete goals from memory
        let goals = call system/goals.get_incomplete_goals()
        log "Found {goals.length} incomplete goals to process"
        
        let processed_count = 0
        let resumed_count = 0
        let escalated_count = 0
        
        # Process each goal
        for goal in goals {
            processed_count++
            
            # Skip locked goals (being processed by another agent)
            if goal.locked {
                log "⏭️ Skipping locked goal: {goal.title} (id: {goal.id})"
                continue
            }
            
            # Only process pending or in_progress goals
            if goal.status in ["pending", "in_progress"] {
                let plugin_ok = true
                let recent_attempt = call system/utils.time_since(goal.last_attempt)
                
                # Check plugin health if enabled
                if config.plugin_health_check {
                    plugin_ok = call system/plugins.check_plugin_health(goal.plugin)
                    if not plugin_ok {
                        log "⚠️ Plugin {goal.plugin} unhealthy for goal {goal.id}"
                    }
                }
                
                # Check retry attempts limit
                let retry_count = goal.retry_count || 0
                if retry_count >= config.max_retry_attempts {
                    log "🛑 Goal {goal.id} exceeded max retry attempts ({config.max_retry_attempts})"
                    call system/goals.mark_goal_failed(goal, "max_retries_exceeded")
                    call system/logger.log_event("goal_failed", {
                        goal_id: goal.id,
                        reason: "max_retries_exceeded",
                        retry_count: retry_count
                    })
                    continue
                }
                
                # Determine action based on timing and plugin health
                if plugin_ok and recent_attempt > (config.retry_delay_minutes * 60) {
                    # Retry the goal
                    log "🔄 Retrying goal: {goal.title} (id: {goal.id})"
                    
                    try {
                        call system/goals.resume_goal(goal)
                        resumed_count++
                        
                        if config.log_all_actions {
                            call system/logger.log_event("goal_resumed", {
                                goal_id: goal.id,
                                goal_title: goal.title,
                                plugin: goal.plugin,
                                retry_count: retry_count + 1,
                                timestamp: now()
                            })
                        }
                    } catch (error) {
                        log "❌ Failed to resume goal {goal.id}: {error.message}"
                        call system/logger.log_event("goal_resume_failed", {
                            goal_id: goal.id,
                            error: error.message,
                            timestamp: now()
                        })
                    }
                }
                else if recent_attempt > (config.escalation_threshold_hours * 3600) {
                    # Escalate the goal
                    log "⬆️ Escalating stalled goal: {goal.title} (id: {goal.id})"
                    
                    try {
                        call system/agents.escalate_goal(goal)
                        escalated_count++
                        
                        if config.log_all_actions {
                            call system/logger.log_event("goal_escalated", {
                                goal_id: goal.id,
                                goal_title: goal.title,
                                stall_duration: recent_attempt,
                                escalation_reason: "timeout",
                                timestamp: now()
                            })
                        }
                    } catch (error) {
                        log "❌ Failed to escalate goal {goal.id}: {error.message}"
                        call system/logger.log_event("goal_escalation_failed", {
                            goal_id: goal.id,
                            error: error.message,
                            timestamp: now()
                        })
                    }
                }
                else {
                    # Goal is not ready for action yet
                    log "⏳ Goal {goal.id} not ready for action (last attempt: {recent_attempt}s ago)"
                }
            }
        }
        
        # Log summary of autopilot run
        log "✅ Goal Autopilot completed - Processed: {processed_count}, Resumed: {resumed_count}, Escalated: {escalated_count}"
        
        # Store autopilot run statistics
        if config.log_all_actions {
            call system/logger.log_event("autopilot_run_completed", {
                total_goals: goals.length,
                processed_count: processed_count,
                resumed_count: resumed_count,
                escalated_count: escalated_count,
                run_duration: call system/utils.execution_time(),
                timestamp: now()
            })
        }
        
        # Return summary for external monitoring
        return {
            status: "completed",
            summary: {
                total_goals: goals.length,
                processed: processed_count,
                resumed: resumed_count,
                escalated: escalated_count
            }
        }
    }
    
    # Manual trigger function for debugging/testing
    fn trigger_manual_run() {
        log "🔧 Manual autopilot run triggered"
        return on_run()
    }
    
    # Get autopilot statistics
    fn get_statistics() {
        let logs = call system/logger.get_logs_by_type("autopilot_run_completed", 10)
        return {
            recent_runs: logs.length,
            last_run: logs[0] || null,
            average_goals_per_run: logs.map(l => l.data.total_goals).average()
        }
    }
}
