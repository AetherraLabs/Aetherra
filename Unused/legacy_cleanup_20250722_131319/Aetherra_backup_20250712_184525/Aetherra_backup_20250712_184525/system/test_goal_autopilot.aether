# Test Goal Autopilot Integration
# Verifies that the goal autopilot system works correctly with all dependencies

plugin test_goal_autopilot {
    description: "Integration test for the goal autopilot system."
    memory_access: read-write
    tags: [test, integration, autopilot]

    fn run_integration_test() {
        log "üß™ Starting Goal Autopilot Integration Test"

        # Test 1: Check if all required system scripts are accessible
        let systems_to_test = [
            "system/goals",
            "system/agents",
            "system/logger",
            "system/utils",
            "system/plugins"
        ]

        log "üìã Testing system script accessibility..."
        for system in systems_to_test {
            try {
                # Try to access each system script
                log "  ‚úì Testing {system}..."

                # Test basic function calls that autopilot uses
                if system == "system/goals" {
                    let test_goals = call system/goals.get_incomplete_goals()
                    log "    ‚úì get_incomplete_goals() returned {test_goals.length} goals"
                }
                else if system == "system/utils" {
                    let current_time = now()
                    let time_diff = call system/utils.time_since(current_time - 100)
                    log "    ‚úì time_since() calculated: {time_diff}s"
                }
                else if system == "system/logger" {
                    call system/logger.log_event("test_event", {test: true})
                    log "    ‚úì log_event() executed successfully"
                }
                else if system == "system/plugins" {
                    let health = call system/plugins.check_plugin_health("test_plugin")
                    log "    ‚úì check_plugin_health() returned: {health}"
                }

            } catch (error) {
                log "    ‚ùå Error testing {system}: {error.message}"
                return {success: false, error: "System {system} failed test: {error.message}"}
            }
        }

        # Test 2: Create a test goal for autopilot to process
        log "üéØ Creating test goal..."
        try {
            let test_goal = call system/goals.create_goal(
                "Test Goal for Autopilot",
                "A test goal to verify autopilot functionality",
                "test_plugin",
                "normal"
            )
            log "‚úì Created test goal: {test_goal.id}"

            # Test 3: Run the autopilot manually to process the test goal
            log "üöÄ Running goal autopilot manually..."
            let autopilot_result = call system/goal_autopilot.trigger_manual_run()
            log "‚úì Autopilot completed with result: {autopilot_result.status}"
            log "  - Processed: {autopilot_result.summary.processed}"
            log "  - Resumed: {autopilot_result.summary.resumed}"
            log "  - Escalated: {autopilot_result.summary.escalated}"

            # Test 4: Check autopilot statistics
            log "üìä Checking autopilot statistics..."
            let stats = call system/goal_autopilot.get_statistics()
            log "‚úì Recent runs: {stats.recent_runs}"

            # Clean up test goal
            log "üßπ Cleaning up test goal..."
            call system/goals.mark_goal_completed(test_goal, {test: true})

            log "‚úÖ Goal Autopilot Integration Test PASSED"
            return {
                success: true,
                autopilot_result: autopilot_result,
                stats: stats
            }

        } catch (error) {
            log "‚ùå Integration test failed: {error.message}"
            return {success: false, error: error.message}
        }
    }

    fn quick_status_check() {
        log "üìä Quick Goal Autopilot Status Check"

        try {
            # Check goal statistics
            let goal_stats = call system/goals.get_goal_statistics()
            log "Goal Stats: {goal_stats.total} total, {goal_stats.pending} pending, {goal_stats.in_progress} in progress"

            # Check autopilot stats
            let autopilot_stats = call system/goal_autopilot.get_statistics()
            log "Autopilot: {autopilot_stats.recent_runs} recent runs"

            return {
                success: true,
                goal_stats: goal_stats,
                autopilot_stats: autopilot_stats
            }
        } catch (error) {
            log "‚ùå Status check failed: {error.message}"
            return {success: false, error: error.message}
        }
    }
}
