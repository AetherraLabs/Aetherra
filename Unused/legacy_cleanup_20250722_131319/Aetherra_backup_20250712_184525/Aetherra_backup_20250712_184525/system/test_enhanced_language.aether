# Test Enhanced Language Features
# Comprehensive test script for the new .aether language enhancements

plugin test_enhanced_language {
    description: "Test all new enhanced language features for .aether"
    memory_access: read-write
    tags: [test, language, features, enhanced]

    fn run_all_tests() {
        log "🧪 Starting Enhanced Language Features Test Suite"

        let test_results = {
            if_else: false,
            for_loops: false,
            while_loops: false,
            try_catch: false,
            match_switch: false,
            wait_timing: false,
            flow_control: false,
            return_values: false,
            imports: false
        }

        # Test 1: if/else control blocks
        log "📋 Testing if/else control blocks..."
        if true {
            log "  ✓ if block executed correctly"
            test_results.if_else = true
        } else {
            log "  ❌ else block executed when it shouldn't"
        }

        let condition = false
        if condition {
            log "  ❌ if block executed when it shouldn't"
        } else {
            log "  ✓ else block executed correctly"
        }

        # Test 2: for loops
        log "📋 Testing for loops..."
        let items = [1, 2, 3]
        let sum = 0

        for item in items {
            sum = sum + item
            log "  Processing item: {item}"
        }

        if sum == 6 {
            log "  ✓ for loop calculated correct sum: {sum}"
            test_results.for_loops = true
        } else {
            log "  ❌ for loop failed, sum: {sum}"
        }

        # Test 3: while loops
        log "📋 Testing while loops..."
        let counter = 0

        while counter < 3 {
            counter = counter + 1
            log "  While loop iteration: {counter}"
        }

        if counter == 3 {
            log "  ✓ while loop executed correctly"
            test_results.while_loops = true
        }

        # Test 4: try/catch error handling
        log "📋 Testing try/catch error handling..."
        try {
            log "  ✓ try block executed"
            test_results.try_catch = true
            # Simulate an error for catch testing
        } catch (error) {
            log "  ✓ catch block handled error: {error}"
        }

        # Test 5: match/switch statements
        log "📋 Testing match/switch statements..."
        let status = "pending"

        match status {
            case "pending": {
                log "  ✓ match case 'pending' executed correctly"
                test_results.match_switch = true
            }
            case "completed": {
                log "  ❌ wrong case executed"
            }
            default: {
                log "  ❌ default case executed incorrectly"
            }
        }

        # Test 6: wait/timing control
        log "📋 Testing wait/timing control..."
        log "  Starting wait test..."
        wait 1s
        log "  ✓ wait completed successfully"
        test_results.wait_timing = true

        # Test 7: break/continue flow control
        log "📋 Testing break/continue flow control..."
        let break_test = false
        let continue_test = false

        for i in [1, 2, 3, 4, 5] {
            if i == 2 {
                continue_test = true
                continue
            }
            if i == 4 {
                break_test = true
                break
            }
            log "  Processing: {i}"
        }

        if break_test and continue_test {
            log "  ✓ break and continue work correctly"
            test_results.flow_control = true
        }

        # Test 8: function return values
        log "📋 Testing function return values..."

        fn add_numbers(a, b) {
            return a + b
        }

        fn multiply_numbers(x, y) {
            let result = x * y
            return result
        }

        let sum_result = add_numbers(5, 3)
        let mult_result = multiply_numbers(4, 6)

        if sum_result == 8 and mult_result == 24 {
            log "  ✓ function return values work correctly"
            log "  Sum: {sum_result}, Product: {mult_result}"
            test_results.return_values = true
        }

        # Test 9: import/use module system
        log "📋 Testing import/use module system..."
        try {
            import "system/utils" as utils
            use system/logger

            log "  ✓ import and use statements executed"
            test_results.imports = true
        } catch (error) {
            log "  ⚠️ import test encountered issue: {error}"
        }

        # Summary
        log "🏁 Enhanced Language Features Test Summary:"
        let passed_tests = 0
        let total_tests = 0

        for test_name, result in test_results {
            total_tests = total_tests + 1
            if result {
                passed_tests = passed_tests + 1
                log "  ✅ {test_name}: PASSED"
            } else {
                log "  ❌ {test_name}: FAILED"
            }
        }

        log "📊 Test Results: {passed_tests}/{total_tests} tests passed"

        if passed_tests == total_tests {
            log "🎉 ALL ENHANCED LANGUAGE FEATURES WORKING!"
        } else {
            log "⚠️ Some features need attention"
        }

        return {
            success: passed_tests == total_tests,
            passed: passed_tests,
            total: total_tests,
            results: test_results
        }
    }

    # Quick syntax validation test
    fn test_syntax_only() {
        log "📝 Testing syntax parsing for new features..."

        # This function just tests that the syntax is recognized
        if true {
            log "if/else syntax OK"
        }

        for x in [1] {
            log "for loop syntax OK"
        }

        try {
            log "try/catch syntax OK"
        } catch (e) {
            log "catch clause syntax OK"
        }

        match "test" {
            case "test": log "match/case syntax OK"
            default: log "default case syntax OK"
        }

        wait 0s

        fn test_func() {
            return "return syntax OK"
        }

        import "test" as test_module

        log "✅ All syntax features parsed successfully"
        return true
    }
}
