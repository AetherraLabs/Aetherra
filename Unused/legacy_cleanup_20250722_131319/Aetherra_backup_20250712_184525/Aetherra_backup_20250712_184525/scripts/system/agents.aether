# Agents Management System
# Handles agent routing, escalation, and status management

goal: manage_agent_ecosystem
consciousness: enabled
memory: persistent
identity: "AgentManager"

# Import dependencies
import "Aetherra/system/utils.aether" as utils
import "Aetherra/system/logger.aether" as logger

# Configuration
agent_config: {
    escalation_timeout: "5 minutes",
    max_concurrent_escalations: 10,
    agent_health_check_interval: "15 minutes",
    fallback_agent: "system_admin"
}

# Core Functions

# Escalate a goal to an appropriate agent
function escalate_goal(goal):
    try:
        think f"Escalating goal {goal.id}: {goal.title}"

        # Find the best agent for this goal
        target_agent = find_best_agent_for_goal(goal)

        if not target_agent:
            think "No suitable agent found, using fallback"
            target_agent = agent_config.fallback_agent

        # Create escalation record
        escalation = {
            "type": "goal_escalation",
            "goal_id": goal.id,
            "goal_title": goal.title,
            "agent_id": target_agent,
            "escalated_at": now(),
            "status": "pending",
            "priority": goal.priority or "medium",
            "context": {
                "original_plugin": goal.plugin,
                "retry_count": goal.retry_count or 0,
                "failure_reason": goal.failure_reason
            }
        }

        # Store escalation in memory
        escalation_id = store_memory(escalation)

        # Notify the target agent
        notify_agent(target_agent, escalation)

        # Log the escalation
        logger.log_event("goal_escalation_created", {
            "escalation_id": escalation_id,
            "goal_id": goal.id,
            "target_agent": target_agent
        })

        remember goal_escalated: {
            "escalation_id": escalation_id,
            "goal_id": goal.id,
            "agent_id": target_agent,
            "timestamp": now()
        }

        return {
            "success": true,
            "escalation_id": escalation_id,
            "agent_id": target_agent
        }

    except Exception as e:
        think f"Failed to escalate goal {goal.id}: {e}"
        logger.log_event("goal_escalation_failed", {
            "goal_id": goal.id,
            "error": str(e)
        })

        return {
            "success": false,
            "error": str(e)
        }

# Find the best agent for a given goal
function find_best_agent_for_goal(goal):
    # Get all available agents
    available_agents = get_available_agents()

    if not available_agents:
        return null

    # Score agents based on goal characteristics
    scored_agents = []

    for agent in available_agents:
        score = calculate_agent_score(agent, goal)
        if score > 0:
            scored_agents.append({
                "agent_id": agent.id,
                "score": score,
                "capabilities": agent.capabilities,
                "current_load": agent.current_load or 0
            })

    # Sort by score (highest first) then by load (lowest first)
    scored_agents.sort(key=lambda a: (a.score, -a.current_load), reverse=true)

    return scored_agents[0].agent_id if scored_agents else null

# Calculate how well an agent matches a goal
function calculate_agent_score(agent, goal):
    score = 0

    # Check if agent has relevant capabilities
    if goal.plugin and goal.plugin in agent.capabilities:
        score += 10

    # Check goal priority vs agent expertise
    if goal.priority == "critical" and "critical_tasks" in agent.specialties:
        score += 8
    elif goal.priority == "high" and "high_priority" in agent.specialties:
        score += 6

    # Check agent availability
    if agent.status == "available":
        score += 5
    elif agent.status == "busy" and agent.current_load < 5:
        score += 2

    # Prefer agents with lower current load
    if agent.current_load < 3:
        score += 3
    elif agent.current_load < 5:
        score += 1

    # Check agent success rate with similar goals
    if agent.success_rate and agent.success_rate > 0.8:
        score += 4
    elif agent.success_rate and agent.success_rate > 0.6:
        score += 2

    return score

# Get all available agents
function get_available_agents():
    agents = search_memory({
        type: "agent",
        status_in: ["available", "busy"]
    })

    # Filter out agents that are over capacity
    return agents.filter(agent =>
        agent.max_concurrent_tasks == null or
        (agent.current_load or 0) < agent.max_concurrent_tasks
    )

# Notify an agent about an escalation
function notify_agent(agent_id, escalation):
    try:
        # This would integrate with the agent communication system
        # For now, we'll store a notification in memory
        notification = {
            "type": "agent_notification",
            "agent_id": agent_id,
            "notification_type": "goal_escalation",
            "escalation_id": escalation.id,
            "goal_id": escalation.goal_id,
            "priority": escalation.priority,
            "created_at": now(),
            "status": "pending"
        }

        store_memory(notification)

        think f"Notified agent {agent_id} about escalation {escalation.id}"

        return true

    except Exception as e:
        think f"Failed to notify agent {agent_id}: {e}"
        return false

# Get agent status
function get_agent_status(agent_id):
    agent = get_memory_by_id(agent_id)

    if not agent:
        return null

    # Get recent activity
    recent_tasks = search_memory({
        type: "agent_task",
        agent_id: agent_id,
        created_at_after: utils.get_timestamp_ago(3600)  # Last hour
    })

    return {
        "agent_id": agent_id,
        "status": agent.status,
        "current_load": agent.current_load or 0,
        "max_concurrent_tasks": agent.max_concurrent_tasks,
        "capabilities": agent.capabilities,
        "specialties": agent.specialties,
        "success_rate": agent.success_rate,
        "recent_tasks": len(recent_tasks),
        "last_active": agent.last_active
    }

# Register a new agent
function register_agent(agent_data):
    agent = {
        "type": "agent",
        "id": agent_data.id,
        "name": agent_data.name,
        "status": "available",
        "capabilities": agent_data.capabilities or [],
        "specialties": agent_data.specialties or [],
        "max_concurrent_tasks": agent_data.max_concurrent_tasks or 5,
        "current_load": 0,
        "success_rate": null,
        "created_at": now(),
        "last_active": now()
    }

    agent_id = store_memory(agent)

    logger.log_event("agent_registered", {
        "agent_id": agent_id,
        "name": agent_data.name,
        "capabilities": agent_data.capabilities
    })

    return agent_id

# Update agent status
function update_agent_status(agent_id, status_update):
    update_memory(agent_id, {
        ...status_update,
        "last_active": now()
    })

    logger.log_event("agent_status_updated", {
        "agent_id": agent_id,
        "update": status_update
    })

# Get escalation status
function get_escalation_status(escalation_id):
    return get_memory_by_id(escalation_id)

# List all active escalations
function get_active_escalations():
    return search_memory({
        type: "goal_escalation",
        status_in: ["pending", "in_progress"]
    })

# Health check for all agents
when agent_health_check_triggered:
    think "Running agent health check"

    agents = search_memory({type: "agent"})

    for agent in agents:
        # Check if agent has been active recently
        if agent.last_active and utils.time_since(agent.last_active) > 3600:  # 1 hour
            # Mark as potentially inactive
            update_agent_status(agent.id, {
                "status": "inactive",
                "last_health_check": now()
            })

        # Log health status
        logger.log_event("agent_health_checked", {
            "agent_id": agent.id,
            "status": agent.status,
            "last_active": agent.last_active
        })

    remember agent_health_check_completed: {
        "checked_count": len(agents),
        "timestamp": now()
    }
