# Goal Autopilot - Flagship .aether Script
# Automatically monitors, resumes, retries, and escalates incomplete or stalled goals
# Acts as a background cognitive loop that keeps the OS moving toward its intentions

goal: manage_goal_lifecycle
consciousness: enabled
memory: persistent
identity: "GoalAutopilot"

# Import dependencies
import "Aetherra/system/goals.aether" as goals
import "Aetherra/system/agents.aether" as agents
import "Aetherra/system/logger.aether" as logger
import "Aetherra/system/utils.aether" as utils

# Configuration
autopilot_config: {
    scan_interval: "30 minutes",
    retry_threshold: "10 minutes",
    escalation_threshold: "1 hour",
    max_retry_attempts: 3,
    safety_checks: true,
    logging_enabled: true
}

# Main autopilot function
when goal_autopilot_triggered:
    think "Starting goal autopilot scan..."

    # Get all incomplete goals
    incomplete_goals = goals.get_incomplete_goals()

    think f"Found {len(incomplete_goals)} incomplete goals to process"

    processed_count = 0
    resumed_count = 0
    escalated_count = 0
    failed_count = 0

    for goal in incomplete_goals:
        # Skip locked goals
        if goal.locked:
            think f"Skipping locked goal: {goal.title}"
            continue

        # Check goal status and timing
        if goal.status in ["pending", "in_progress"]:
            time_since_attempt = utils.time_since(goal.last_attempt or goal.created_at)
            retry_count = goal.retry_count or 0

            # Safety check: Don't process goals that are too new
            if time_since_attempt < 300:  # 5 minutes minimum
                continue

            processed_count += 1

            # Check if we should retry
            if should_retry_goal(goal, time_since_attempt, retry_count):
                if retry_goal(goal):
                    resumed_count += 1
                else:
                    failed_count += 1

            # Check if we should escalate
            elif should_escalate_goal(goal, time_since_attempt, retry_count):
                if escalate_goal(goal):
                    escalated_count += 1
                else:
                    failed_count += 1

    # Log summary
    summary = {
        "total_incomplete": len(incomplete_goals),
        "processed": processed_count,
        "resumed": resumed_count,
        "escalated": escalated_count,
        "failed": failed_count,
        "timestamp": now()
    }

    logger.log_event("autopilot_scan_complete", summary)

    think f"Autopilot scan complete: {resumed_count} resumed, {escalated_count} escalated, {failed_count} failed"

    remember autopilot_scan_completed: summary

# Helper function to determine if a goal should be retried
function should_retry_goal(goal, time_since_attempt, retry_count):
    # Don't retry if we've exceeded max attempts
    if retry_count >= autopilot_config.max_retry_attempts:
        return false

    # Don't retry if not enough time has passed
    if time_since_attempt < 600:  # 10 minutes
        return false

    # Check if the plugin/agent is healthy
    if goal.plugin:
        plugin_health = check_plugin_health(goal.plugin)
        if not plugin_health.healthy:
            think f"Plugin {goal.plugin} is unhealthy, skipping retry"
            return false

    # Check goal priority - high priority goals retry more aggressively
    if goal.priority == "high" and time_since_attempt > 300:  # 5 minutes for high priority
        return true

    if goal.priority == "medium" and time_since_attempt > 600:  # 10 minutes for medium
        return true

    if goal.priority == "low" and time_since_attempt > 1800:  # 30 minutes for low
        return true

    return false

# Helper function to determine if a goal should be escalated
function should_escalate_goal(goal, time_since_attempt, retry_count):
    # Escalate if we've tried too many times
    if retry_count >= autopilot_config.max_retry_attempts:
        return true

    # Escalate based on time thresholds
    escalation_time = 3600  # 1 hour default

    # Adjust based on priority
    if goal.priority == "critical":
        escalation_time = 900   # 15 minutes
    elif goal.priority == "high":
        escalation_time = 1800  # 30 minutes
    elif goal.priority == "low":
        escalation_time = 7200  # 2 hours

    return time_since_attempt > escalation_time

# Function to retry a goal
function retry_goal(goal):
    try:
        think f"Retrying goal: {goal.title}"

        # Increment retry count
        new_retry_count = goals.increment_retry_count(goal)

        # Attempt to resume the goal
        goals.resume_goal(goal)

        # Log the retry attempt
        logger.log_event("goal_retry_attempted", {
            "goal_id": goal.id,
            "goal_title": goal.title,
            "retry_count": new_retry_count,
            "plugin": goal.plugin,
            "priority": goal.priority
        })

        remember goal_retried: {
            "goal_id": goal.id,
            "retry_count": new_retry_count,
            "timestamp": now()
        }

        return true

    except Exception as e:
        think f"Failed to retry goal {goal.id}: {e}"

        # Mark as failed if retry fails
        goals.mark_goal_failed(goal, f"Retry failed: {e}")

        logger.log_event("goal_retry_failed", {
            "goal_id": goal.id,
            "error": str(e),
            "retry_count": goal.retry_count or 0
        })

        return false

# Function to escalate a goal
function escalate_goal(goal):
    try:
        think f"Escalating stalled goal: {goal.title}"

        # Use agents system to escalate
        escalation_result = agents.escalate_goal(goal)

        # Update goal status
        goals.update_memory(goal.id, {
            "status": "escalated",
            "escalated_at": now(),
            "escalation_reason": "Autopilot timeout",
            "escalated_to": escalation_result.agent_id if escalation_result else "unknown"
        })

        # Log the escalation
        logger.log_event("goal_escalated", {
            "goal_id": goal.id,
            "goal_title": goal.title,
            "escalated_to": escalation_result.agent_id if escalation_result else "unknown",
            "retry_count": goal.retry_count or 0,
            "time_stalled": utils.time_since(goal.last_attempt or goal.created_at)
        })

        remember goal_escalated: {
            "goal_id": goal.id,
            "escalated_to": escalation_result.agent_id if escalation_result else "unknown",
            "timestamp": now()
        }

        return true

    except Exception as e:
        think f"Failed to escalate goal {goal.id}: {e}"

        # Mark as failed if escalation fails
        goals.mark_goal_failed(goal, f"Escalation failed: {e}")

        logger.log_event("goal_escalation_failed", {
            "goal_id": goal.id,
            "error": str(e)
        })

        return false

# Function to check plugin health
function check_plugin_health(plugin_name):
    try:
        # This would integrate with the plugin system
        # For now, return a basic health check
        plugin_status = get_plugin_status(plugin_name)

        return {
            "healthy": plugin_status != null and plugin_status.active,
            "status": plugin_status.status if plugin_status else "unknown",
            "last_seen": plugin_status.last_seen if plugin_status else null
        }

    except Exception as e:
        think f"Health check failed for plugin {plugin_name}: {e}"
        return {
            "healthy": false,
            "status": "error",
            "error": str(e)
        }

# Scheduled execution - runs every 30 minutes
when scheduled_autopilot_run:
    if autopilot_config.scan_interval:
        think "Running scheduled goal autopilot scan"
        trigger goal_autopilot_triggered

# Manual trigger function for testing/debugging
function run_autopilot_now():
    think "Manual autopilot trigger requested"
    trigger goal_autopilot_triggered

# Configuration management
function update_autopilot_config(new_config):
    autopilot_config = utils.merge_objects(autopilot_config, new_config)
    remember autopilot_config_updated: {
        "config": autopilot_config,
        "updated_at": now()
    }

function get_autopilot_status():
    recent_scans = recall_tagged("autopilot_scan_completed", limit=5)

    return {
        "config": autopilot_config,
        "recent_scans": recent_scans,
        "last_scan": recent_scans[0] if recent_scans else null,
        "status": "active"
    }
