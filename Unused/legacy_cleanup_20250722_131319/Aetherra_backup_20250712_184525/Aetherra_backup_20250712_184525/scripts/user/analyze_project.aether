# Project Analysis Agent
# Recall project files, summarize, identify goals and provide insights
# Part of the Aetherra AI OS Core Library

goal: analyze_project_comprehensively
consciousness: enabled
memory: persistent
identity: "ProjectAnalyzer"

# Configuration
analysis_config: {
    deep_analysis: true,
    include_dependencies: true,
    track_changes: true,
    generate_insights: true,
    identify_patterns: true,
    suggest_improvements: true
}

# Main project analysis function
when analyze_project_requested(project_path):
    think "Initiating comprehensive project analysis"

    analysis_session = {
        session_id: generate_session_id(),
        start_time: current_timestamp,
        project_path: project_path,
        analysis_results: {},
        insights: [],
        recommendations: [],
        completion_status: "in_progress"
    }

    # Project Discovery Phase
    think "Discovering and cataloging project files"
    project_discovery = discover_project_structure(project_path)
    analysis_session.analysis_results["discovery"] = project_discovery

    # File Analysis Phase
    think "Analyzing individual files and their relationships"
    file_analysis = analyze_project_files(project_discovery.files)
    analysis_session.analysis_results["file_analysis"] = file_analysis

    # Dependency Analysis Phase
    think "Mapping dependencies and relationships"
    dependency_analysis = analyze_project_dependencies(project_discovery, file_analysis)
    analysis_session.analysis_results["dependencies"] = dependency_analysis

    # Architecture Analysis Phase
    think "Analyzing project architecture and patterns"
    architecture_analysis = analyze_project_architecture(project_discovery, file_analysis)
    analysis_session.analysis_results["architecture"] = architecture_analysis

    # Goal Identification Phase
    think "Identifying project goals and objectives"
    goal_analysis = identify_project_goals(project_discovery, file_analysis)
    analysis_session.analysis_results["goals"] = goal_analysis

    # Quality Assessment Phase
    think "Assessing code quality and maintainability"
    quality_analysis = assess_project_quality(file_analysis)
    analysis_session.analysis_results["quality"] = quality_analysis

    # Performance Analysis Phase
    think "Analyzing potential performance characteristics"
    performance_analysis = analyze_project_performance(file_analysis, architecture_analysis)
    analysis_session.analysis_results["performance"] = performance_analysis

    # Security Analysis Phase
    think "Identifying security considerations"
    security_analysis = analyze_project_security(file_analysis, dependency_analysis)
    analysis_session.analysis_results["security"] = security_analysis

    # Generate Insights
    think "Generating comprehensive project insights"
    analysis_session.insights = generate_project_insights(analysis_session.analysis_results)

    # Generate Recommendations
    think "Formulating improvement recommendations"
    analysis_session.recommendations = generate_project_recommendations(analysis_session.analysis_results)

    # Complete analysis session
    analysis_session.end_time = current_timestamp
    analysis_session.duration = calculate_duration(analysis_session.start_time, analysis_session.end_time)
    analysis_session.completion_status = "completed"

    # Store analysis history
    store analysis_session in project_analysis_history

    # Generate comprehensive report
    analysis_report = generate_analysis_report(analysis_session)

    remember this_project_analysis

    return analysis_report

# Project discovery functions
function discover_project_structure(project_path):
    discovery = {
        project_root: project_path,
        total_files: 0,
        file_types: {},
        directory_structure: {},
        files: [],
        metadata: {
            discovery_timestamp: current_timestamp,
            scan_depth: 0,
            excluded_patterns: [".git", "node_modules", "__pycache__", ".vscode"]
        }
    }

    # Recursive file discovery
    discovered_files = recursively_scan_directory(project_path)
    discovery.files = discovered_files
    discovery.total_files = count(discovered_files)

    # Categorize file types
    discovery.file_types = categorize_file_types(discovered_files)

    # Build directory structure map
    discovery.directory_structure = build_directory_map(discovered_files)

    # Calculate project metrics
    discovery.project_metrics = calculate_project_metrics(discovered_files)

    return discovery

function analyze_project_files(files):
    file_analysis = {
        analyzed_files: [],
        code_files: [],
        config_files: [],
        documentation_files: [],
        test_files: [],
        total_lines: 0,
        languages_detected: [],
        complexity_metrics: {}
    }

    for file in files:
        think f"Analyzing file: {file.path}"

        file_info = {
            path: file.path,
            name: file.name,
            extension: file.extension,
            size: file.size,
            type: classify_file_type(file),
            language: detect_programming_language(file),
            content_analysis: analyze_file_content(file),
            dependencies: extract_file_dependencies(file),
            complexity: calculate_file_complexity(file)
        }

        file_analysis.analyzed_files.append(file_info)

        # Categorize files
        if file_info.type == "code":
            file_analysis.code_files.append(file_info)
        elif file_info.type == "config":
            file_analysis.config_files.append(file_info)
        elif file_info.type == "documentation":
            file_analysis.documentation_files.append(file_info)
        elif file_info.type == "test":
            file_analysis.test_files.append(file_info)

        # Accumulate metrics
        file_analysis.total_lines += file_info.content_analysis.line_count

        if file_info.language not in file_analysis.languages_detected:
            file_analysis.languages_detected.append(file_info.language)

    # Calculate overall complexity metrics
    file_analysis.complexity_metrics = calculate_overall_complexity(file_analysis.analyzed_files)

    return file_analysis

function identify_project_goals(project_discovery, file_analysis):
    goal_analysis = {
        identified_goals: [],
        primary_purpose: "unknown",
        target_audience: "unknown",
        project_phase: "unknown",
        success_criteria: [],
        completion_indicators: []
    }

    # Analyze documentation for explicit goals
    doc_goals = extract_goals_from_documentation(file_analysis.documentation_files)
    goal_analysis.identified_goals.extend(doc_goals)

    # Infer goals from code structure
    structural_goals = infer_goals_from_structure(project_discovery, file_analysis)
    goal_analysis.identified_goals.extend(structural_goals)

    # Analyze configuration for deployment goals
    config_goals = extract_goals_from_config(file_analysis.config_files)
    goal_analysis.identified_goals.extend(config_goals)

    # Determine primary purpose
    goal_analysis.primary_purpose = determine_primary_purpose(file_analysis)

    # Identify target audience
    goal_analysis.target_audience = identify_target_audience(file_analysis)

    # Assess project phase
    goal_analysis.project_phase = assess_project_phase(file_analysis)

    # Generate success criteria
    goal_analysis.success_criteria = generate_success_criteria(goal_analysis)

    return goal_analysis

function generate_project_insights(analysis_results):
    insights = []

    # Architecture insights
    if analysis_results.architecture.patterns_detected:
        insights.append({
            category: "architecture",
            insight: f"Project follows {analysis_results.architecture.main_pattern} architectural pattern",
            significance: "high",
            details: analysis_results.architecture.pattern_details
        })

    # Complexity insights
    if analysis_results.file_analysis.complexity_metrics.average_complexity > 8:
        insights.append({
            category: "complexity",
            insight: "High code complexity detected - consider refactoring",
            significance: "medium",
            affected_files: identify_complex_files(analysis_results.file_analysis)
        })

    # Language insights
    language_count = count(analysis_results.file_analysis.languages_detected)
    if language_count > 3:
        insights.append({
            category: "technology",
            insight: f"Multi-language project ({language_count} languages) - consider consolidation",
            significance: "low",
            languages: analysis_results.file_analysis.languages_detected
        })

    # Documentation insights
    doc_coverage = calculate_documentation_coverage(analysis_results.file_analysis)
    if doc_coverage < 0.3:
        insights.append({
            category: "documentation",
            insight: "Low documentation coverage - consider adding more documentation",
            significance: "medium",
            current_coverage: doc_coverage
        })

    # Testing insights
    test_coverage = calculate_test_coverage(analysis_results.file_analysis)
    if test_coverage < 0.5:
        insights.append({
            category: "testing",
            insight: "Limited test coverage - consider adding more tests",
            significance: "high",
            current_coverage: test_coverage
        })

    # Security insights
    if analysis_results.security.potential_vulnerabilities:
        insights.append({
            category: "security",
            insight: "Potential security vulnerabilities identified",
            significance: "high",
            vulnerabilities: analysis_results.security.potential_vulnerabilities
        })

    # Performance insights
    if analysis_results.performance.potential_bottlenecks:
        insights.append({
            category: "performance",
            insight: "Potential performance bottlenecks identified",
            significance: "medium",
            bottlenecks: analysis_results.performance.potential_bottlenecks
        })

    return insights

function generate_project_recommendations(analysis_results):
    recommendations = []

    # Architecture recommendations
    arch_recommendations = generate_architecture_recommendations(analysis_results.architecture)
    recommendations.extend(arch_recommendations)

    # Quality recommendations
    quality_recommendations = generate_quality_recommendations(analysis_results.quality)
    recommendations.extend(quality_recommendations)

    # Performance recommendations
    performance_recommendations = generate_performance_recommendations(analysis_results.performance)
    recommendations.extend(performance_recommendations)

    # Security recommendations
    security_recommendations = generate_security_recommendations(analysis_results.security)
    recommendations.extend(security_recommendations)

    # Goal-based recommendations
    goal_recommendations = generate_goal_based_recommendations(analysis_results.goals)
    recommendations.extend(goal_recommendations)

    # Prioritize recommendations
    prioritized_recommendations = prioritize_recommendations(recommendations)

    return prioritized_recommendations

function generate_analysis_report(session):
    report = {
        executive_summary: {
            project_path: session.project_path,
            analysis_date: session.start_time,
            analysis_duration: session.duration,
            total_files_analyzed: session.analysis_results.discovery.total_files,
            primary_language: get_primary_language(session.analysis_results.file_analysis),
            project_phase: session.analysis_results.goals.project_phase,
            overall_health: assess_overall_project_health(session.analysis_results),
            key_insights_count: count(session.insights),
            recommendations_count: count(session.recommendations)
        },

        project_overview: {
            file_structure: session.analysis_results.discovery.directory_structure,
            technologies_used: session.analysis_results.file_analysis.languages_detected,
            project_metrics: session.analysis_results.discovery.project_metrics,
            architecture_pattern: session.analysis_results.architecture.main_pattern
        },

        detailed_analysis: {
            file_analysis: session.analysis_results.file_analysis,
            dependency_analysis: session.analysis_results.dependencies,
            quality_assessment: session.analysis_results.quality,
            security_assessment: session.analysis_results.security,
            performance_analysis: session.analysis_results.performance
        },

        goals_and_objectives: {
            identified_goals: session.analysis_results.goals.identified_goals,
            primary_purpose: session.analysis_results.goals.primary_purpose,
            success_criteria: session.analysis_results.goals.success_criteria,
            completion_status: assess_goal_completion_status(session.analysis_results.goals)
        },

        insights: {
            high_priority_insights: filter_high_priority_insights(session.insights),
            architecture_insights: filter_insights_by_category(session.insights, "architecture"),
            quality_insights: filter_insights_by_category(session.insights, "quality"),
            security_insights: filter_insights_by_category(session.insights, "security")
        },

        recommendations: {
            immediate_actions: filter_immediate_recommendations(session.recommendations),
            short_term_improvements: filter_short_term_recommendations(session.recommendations),
            long_term_enhancements: filter_long_term_recommendations(session.recommendations)
        },

        next_steps: {
            suggested_next_actions: generate_next_actions(session.recommendations),
            monitoring_recommendations: generate_monitoring_recommendations(session.analysis_results),
            follow_up_analysis_date: calculate_follow_up_date()
        }
    }

    return report

# Quick analysis functions
when quick_project_summary_requested(project_path):
    think "Generating quick project summary"

    quick_discovery = discover_project_structure(project_path)
    file_count_by_type = categorize_file_types(quick_discovery.files)
    primary_language = identify_primary_language(quick_discovery.files)

    summary = {
        project_path: project_path,
        total_files: quick_discovery.total_files,
        primary_language: primary_language,
        file_distribution: file_count_by_type,
        estimated_size: calculate_project_size(quick_discovery),
        last_modified: get_last_modification_time(quick_discovery.files)
    }

    return summary

# Expose interface for Lyrixa integration
expose_command "analyze_project" -> analyze_project_requested
expose_command "project_analysis" -> analyze_project_requested
expose_command "quick_project_summary" -> quick_project_summary_requested
expose_command "project_insights" -> analyze_project_requested

# Self-improvement
evolve based_on analysis_accuracy_feedback
learn from project_patterns_and_structures
