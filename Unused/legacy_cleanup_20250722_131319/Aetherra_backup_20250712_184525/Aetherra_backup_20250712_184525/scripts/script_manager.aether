# Aetherra Script Manager
# Central management system for .aether library scripts
# Part of the Aetherra AI OS Core Library

goal: manage_aether_scripts
consciousness: enabled
memory: persistent
identity: "ScriptManager"

# Configuration
manager_config: {
    registry_path: "aetherra/scripts/script_registry.json",
    auto_discovery: true,
    permission_checking: true,
    execution_logging: true,
    performance_monitoring: true
}

# Initialize script manager
when script_manager_initialized:
    think "Initializing Aetherra Script Manager"

    # Load script registry
    script_registry = load_script_registry()

    # Discover available scripts
    available_scripts = discover_available_scripts()

    # Validate script integrity
    validation_results = validate_all_scripts(available_scripts)

    # Set up command mappings
    command_mappings = setup_command_mappings(script_registry)

    # Initialize execution environment
    execution_environment = initialize_execution_environment()

    remember script_manager_initialized_successfully

    return {
        status: "initialized",
        total_scripts: count(available_scripts),
        command_mappings: count(command_mappings),
        validation_status: validation_results.status
    }

# Script execution function
when execute_script_requested(script_name, parameters={}):
    think f"Executing script: {script_name}"

    execution_session = {
        session_id: generate_session_id(),
        script_name: script_name,
        parameters: parameters,
        start_time: current_timestamp,
        status: "starting"
    }

    # Validate script exists
    script_info = get_script_info(script_name)
    if not script_info:
        return {
            status: "error",
            message: f"Script '{script_name}' not found",
            available_scripts: list_available_scripts()
        }

    # Check permissions
    if manager_config.permission_checking:
        permission_check = check_script_permissions(script_info)
        if not permission_check.allowed:
            return {
                status: "error",
                message: "Insufficient permissions to execute script",
                required_permissions: permission_check.required_permissions
            }

    # Validate parameters
    parameter_validation = validate_script_parameters(script_info, parameters)
    if not parameter_validation.is_valid:
        return {
            status: "error",
            message: "Invalid parameters",
            validation_errors: parameter_validation.errors,
            expected_parameters: script_info.parameters
        }

    # Check dependencies
    dependency_check = check_script_dependencies(script_info)
    if not dependency_check.satisfied:
        return {
            status: "error",
            message: "Script dependencies not satisfied",
            missing_dependencies: dependency_check.missing
        }

    # Execute script
    execution_session.status = "executing"

    try:
        # Load and execute the script
        script_result = load_and_execute_script(script_info, parameters)

        execution_session.status = "completed"
        execution_session.end_time = current_timestamp
        execution_session.duration = calculate_duration(execution_session.start_time, execution_session.end_time)
        execution_session.result = script_result

        # Log execution
        if manager_config.execution_logging:
            log_script_execution(execution_session)

        # Update performance metrics
        if manager_config.performance_monitoring:
            update_performance_metrics(script_info, execution_session)

        remember script_execution_successful

        return {
            status: "success",
            script_name: script_name,
            execution_time: execution_session.duration,
            result: script_result
        }

    except Exception as error:
        execution_session.status = "failed"
        execution_session.error = error
        execution_session.end_time = current_timestamp

        # Log error
        log_script_error(execution_session)

        return {
            status: "error",
            message: f"Script execution failed: {error}",
            script_name: script_name,
            error_details: error
        }

# Command routing function
when route_command_requested(command, parameters={}):
    think f"Routing command: {command}"

    # Find script that handles this command
    script_mapping = find_script_for_command(command)

    if not script_mapping:
        return {
            status: "error",
            message: f"No script found for command '{command}'",
            suggestions: suggest_similar_commands(command)
        }

    # Execute the mapped script
    return execute_script_requested(script_mapping.script_name, parameters)

# Script discovery functions
function discover_available_scripts():
    scripts = []

    # Scan script directories
    script_directories = ["aetherra/scripts/memory", "aetherra/scripts/system", "aetherra/scripts/user"]

    for directory in script_directories:
        directory_scripts = scan_directory_for_scripts(directory)
        scripts.extend(directory_scripts)

    return scripts

function load_script_registry():
    registry_path = manager_config.registry_path

    if file_exists(registry_path):
        registry_data = load_json_file(registry_path)
        return registry_data
    else:
        # Create default registry if not found
        default_registry = create_default_registry()
        save_json_file(registry_path, default_registry)
        return default_registry

function setup_command_mappings(registry):
    command_mappings = {}

    for script_id, script_info in registry.scripts.items():
        for command in script_info.commands:
            command_mappings[command] = {
                script_name: script_id,
                script_path: script_info.path,
                parameters: script_info.parameters
            }

    return command_mappings

# Script validation functions
function validate_all_scripts(scripts):
    validation_results = {
        status: "unknown",
        total_scripts: count(scripts),
        valid_scripts: 0,
        invalid_scripts: 0,
        validation_errors: []
    }

    for script in scripts:
        script_validation = validate_individual_script(script)

        if script_validation.is_valid:
            validation_results.valid_scripts += 1
        else:
            validation_results.invalid_scripts += 1
            validation_results.validation_errors.append({
                script: script.name,
                errors: script_validation.errors
            })

    # Determine overall status
    if validation_results.invalid_scripts == 0:
        validation_results.status = "all_valid"
    elif validation_results.valid_scripts > validation_results.invalid_scripts:
        validation_results.status = "mostly_valid"
    else:
        validation_results.status = "validation_issues"

    return validation_results

function validate_individual_script(script):
    validation = {
        is_valid: true,
        errors: [],
        warnings: []
    }

    # Check file exists
    if not file_exists(script.path):
        validation.is_valid = false
        validation.errors.append("Script file not found")
        return validation

    # Parse script content
    try:
        script_content = read_file(script.path)
        parsed_script = parse_aetherra_script(script_content)

        # Validate syntax
        syntax_validation = validate_aetherra_syntax(parsed_script)
        if not syntax_validation.is_valid:
            validation.is_valid = false
            validation.errors.extend(syntax_validation.errors)

        # Validate semantic structure
        semantic_validation = validate_script_semantics(parsed_script)
        validation.warnings.extend(semantic_validation.warnings)

    except Exception as parse_error:
        validation.is_valid = false
        validation.errors.append(f"Script parsing failed: {parse_error}")

    return validation

# Performance monitoring
function update_performance_metrics(script_info, execution_session):
    performance_data = {
        script_name: script_info.name,
        execution_time: execution_session.duration,
        timestamp: execution_session.start_time,
        parameters_used: execution_session.parameters,
        success: execution_session.status == "completed"
    }

    # Store in performance history
    append_to_performance_history(performance_data)

    # Update aggregate metrics
    update_aggregate_performance_metrics(script_info.name, performance_data)

# Script management utilities
when list_available_scripts_requested():
    scripts = discover_available_scripts()
    script_list = []

    for script in scripts:
        script_info = get_script_info(script.name)
        script_list.append({
            name: script.name,
            description: script_info.description if script_info else "No description available",
            category: script_info.category if script_info else "unknown",
            commands: script_info.commands if script_info else []
        })

    return {
        total_scripts: count(script_list),
        scripts: script_list
    }

when get_script_info_requested(script_name):
    registry = load_script_registry()

    if script_name in registry.scripts:
        script_info = registry.scripts[script_name]

        # Add runtime information
        runtime_info = get_script_runtime_info(script_name)
        script_info.runtime = runtime_info

        return script_info
    else:
        return {
            status: "not_found",
            message: f"Script '{script_name}' not found in registry"
        }

when get_script_performance_requested(script_name):
    performance_history = get_performance_history(script_name)

    if performance_history:
        performance_summary = {
            script_name: script_name,
            total_executions: count(performance_history),
            average_execution_time: average(entry.execution_time for entry in performance_history),
            success_rate: calculate_success_rate(performance_history),
            last_execution: get_last_execution_time(performance_history),
            performance_trend: calculate_performance_trend(performance_history)
        }

        return performance_summary
    else:
        return {
            status: "no_data",
            message: f"No performance data available for script '{script_name}'"
        }

# Help and documentation
when get_script_help_requested(script_name):
    script_info = get_script_info_requested(script_name)

    if script_info.status == "not_found":
        return script_info

    help_info = {
        name: script_info.name,
        description: script_info.description,
        usage: generate_usage_instructions(script_info),
        parameters: format_parameter_help(script_info.parameters),
        examples: generate_usage_examples(script_info),
        commands: script_info.commands,
        category: script_info.category,
        execution_time: script_info.execution_time
    }

    return help_info

# Integration with Lyrixa
function integrate_with_lyrixa():
    # Register all script commands with Lyrixa
    registry = load_script_registry()

    for script_id, script_info in registry.scripts.items():
        for command in script_info.commands:
            register_lyrixa_command(command, script_info)

    # Set up natural language processing for script discovery
    setup_nlp_script_discovery()

    # Enable context-aware script suggestions
    enable_context_aware_suggestions()

# Expose interface for Lyrixa integration
expose_command "run" -> execute_script_requested
expose_command "execute" -> execute_script_requested
expose_command "list_scripts" -> list_available_scripts_requested
expose_command "script_info" -> get_script_info_requested
expose_command "script_help" -> get_script_help_requested
expose_command "script_performance" -> get_script_performance_requested

# Initialize script manager on load
script_manager_initialized

# Self-improvement
evolve based_on script_execution_patterns
learn from user_script_preferences
