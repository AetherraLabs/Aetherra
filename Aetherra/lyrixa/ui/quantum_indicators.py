
"""
Quantum UI Integration Helpers
Auto-generated by Quantum Deployment Manager
"""

from typing import Dict, Any, List
import json
from datetime import datetime

class QuantumUIIndicators:
    def __init__(self, quantum_engine):
        self.quantum_engine = quantum_engine
        
    def get_quantum_status(self) -> Dict[str, Any]:
        """Get current quantum system status for UI display."""
        try:
            status = self.quantum_engine.get_quantum_status()
            return {
                "quantum_enabled": status.get("quantum_available", False),
                "coherence_level": status.get("coherence_score", 0.0),
                "error_rate": status.get("error_rate", 0.0),
                "performance_gain": status.get("performance_improvement", 0.0),
                "backend": status.get("active_backend", "simulator"),
                "last_update": datetime.now().isoformat()
            }
        except Exception as e:
            return {
                "quantum_enabled": False,
                "error": str(e),
                "last_update": datetime.now().isoformat()
            }
    
    def format_quantum_metrics(self, metrics: Dict) -> Dict[str, str]:
        """Format quantum metrics for UI display."""
        formatted = {}
        for key, value in metrics.items():
            if key.endswith("_time"):
                formatted[key] = f"{value:.2f}ms"
            elif key.endswith("_ratio"):
                formatted[key] = f"{value:.2%}"
            elif key.endswith("_score"):
                formatted[key] = f"{value:.3f}"
            else:
                formatted[key] = str(value)
        return formatted
    
    def get_performance_chart_data(self) -> List[Dict]:
        """Get performance data for real-time charts."""
        try:
            recent_operations = self.quantum_engine.get_recent_operations(limit=100)
            chart_data = []
            
            for op in recent_operations:
                chart_data.append({
                    "timestamp": op.get("timestamp"),
                    "recall_speed": op.get("recall_time", 0),
                    "association_quality": op.get("association_score", 0),
                    "compression_ratio": op.get("compression_ratio", 0),
                    "interference_pattern": op.get("interference_strength", 0)
                })
            
            return chart_data
        except Exception:
            return []
