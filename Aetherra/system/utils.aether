# System Utilities
# Shared utility functions for the Aetherra OS

plugin utils {
    description: "Shared utility functions for time, data manipulation, and system operations."
    memory_access: none
    tags: [utilities, helpers, system, core]
    
    # Time utilities
    fn time_since(timestamp) {
        return now() - timestamp
    }
    
    fn format_duration(seconds) {
        if seconds < 60 {
            return "{seconds}s"
        } else if seconds < 3600 {
            let minutes = Math.floor(seconds / 60)
            return "{minutes}m {seconds % 60}s"
        } else if seconds < 86400 {
            let hours = Math.floor(seconds / 3600)
            let minutes = Math.floor((seconds % 3600) / 60)
            return "{hours}h {minutes}m"
        } else {
            let days = Math.floor(seconds / 86400)
            let hours = Math.floor((seconds % 86400) / 3600)
            return "{days}d {hours}h"
        }
    }
    
    fn is_recent(timestamp, threshold_seconds = 300) {
        return time_since(timestamp) <= threshold_seconds
    }
    
    fn get_timestamp_ago(seconds_ago) {
        return now() - seconds_ago
    }
    
    fn days_ago(n) {
        return now() - (n * 86400)
    }
    
    fn hours_ago(n) {
        return now() - (n * 3600)
    }
    
    fn minutes_ago(n) {
        return now() - (n * 60)
    }
    
    # Execution timing
    fn start_timer() {
        set_global("timer_start", now())
        return now()
    }
    
    fn execution_time() {
        let start = get_global("timer_start")
        if not start {
            return 0
        }
        return now() - start
    }
    
    # Data manipulation utilities
    fn deep_clone(obj) {
        return JSON.parse(JSON.stringify(obj))
    }
    
    fn merge_objects(obj1, obj2) {
        let result = deep_clone(obj1)
        for key in Object.keys(obj2) {
            result[key] = obj2[key]
        }
        return result
    }
    
    fn filter_object(obj, predicate) {
        let result = {}
        for key in Object.keys(obj) {
            if predicate(key, obj[key]) {
                result[key] = obj[key]
            }
        }
        return result
    }
    
    fn pick_properties(obj, properties) {
        let result = {}
        for prop in properties {
            if obj.hasOwnProperty(prop) {
                result[prop] = obj[prop]
            }
        }
        return result
    }
    
    # Array utilities
    fn unique_array(arr) {
        return [...new Set(arr)]
    }
    
    fn group_by(arr, key_fn) {
        let groups = {}
        for item in arr {
            let key = key_fn(item)
            if not groups[key] {
                groups[key] = []
            }
            groups[key].push(item)
        }
        return groups
    }
    
    fn chunk_array(arr, size) {
        let chunks = []
        for i in range(0, arr.length, size) {
            chunks.push(arr.slice(i, i + size))
        }
        return chunks
    }
    
    # String utilities
    fn camel_to_snake(str) {
        return str.replace(/([A-Z])/g, "_$1").toLowerCase()
    }
    
    fn snake_to_camel(str) {
        return str.replace(/_([a-z])/g, (match, letter) => letter.toUpperCase())
    }
    
    fn truncate_string(str, max_length, suffix = "...") {
        if str.length <= max_length {
            return str
        }
        return str.substring(0, max_length - suffix.length) + suffix
    }
    
    fn normalize_id(str) {
        return str.toLowerCase()
                 .replace(/[^a-z0-9]/g, "_")
                 .replace(/_+/g, "_")
                 .replace(/^_|_$/g, "")
    }
    
    # Validation utilities
    fn is_valid_email(email) {
        let pattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
        return pattern.test(email)
    }
    
    fn is_valid_url(url) {
        try {
            new URL(url)
            return true
        } catch {
            return false
        }
    }
    
    fn is_empty(value) {
        if value == null || value == undefined {
            return true
        }
        if typeof(value) == "string" {
            return value.trim() == ""
        }
        if Array.isArray(value) {
            return value.length == 0
        }
        if typeof(value) == "object" {
            return Object.keys(value).length == 0
        }
        return false
    }
    
    # System utilities
    fn generate_uuid() {
        return crypto.randomUUID() || 
               'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                   let r = Math.random() * 16 | 0
                   let v = c == 'x' ? r : (r & 0x3 | 0x8)
                   return v.toString(16)
               })
    }
    
    fn hash_string(str) {
        let hash = 0
        for i in range(0, str.length) {
            let char = str.charCodeAt(i)
            hash = ((hash << 5) - hash) + char
            hash = hash & hash // Convert to 32-bit integer
        }
        return hash.toString(16)
    }
    
    fn retry_with_backoff(fn, max_attempts = 3, base_delay = 1000) {
        for attempt in range(1, max_attempts + 1) {
            try {
                return fn()
            } catch (error) {
                if attempt == max_attempts {
                    throw error
                }
                
                let delay = base_delay * Math.pow(2, attempt - 1)
                sleep(delay)
            }
        }
    }
    
    # Performance utilities
    fn debounce(fn, delay) {
        let timeout_id = null
        
        return function(...args) {
            if timeout_id {
                clearTimeout(timeout_id)
            }
            
            timeout_id = setTimeout(() => {
                fn.apply(this, args)
            }, delay)
        }
    }
    
    fn throttle(fn, limit) {
        let in_throttle = false
        
        return function(...args) {
            if not in_throttle {
                fn.apply(this, args)
                in_throttle = true
                setTimeout(() => in_throttle = false, limit)
            }
        }
    }
    
    # Memory size estimation
    fn estimate_object_size(obj) {
        let json_str = JSON.stringify(obj)
        return json_str.length * 2 // Rough estimate in bytes (UTF-16)
    }
    
    # Error handling utilities
    fn safe_execute(fn, default_value = null) {
        try {
            return fn()
        } catch (error) {
            log "⚠️ Safe execution caught error: {error.message}"
            return default_value
        }
    }
    
    fn create_error(message, type = "Error", details = {}) {
        return {
            message: message,
            type: type,
            details: details,
            timestamp: now(),
            stack: get_stack_trace()
        }
    }
    
    # Configuration helpers
    fn get_config_value(key, default_value = null) {
        return get_global("config_" + key) || default_value
    }
    
    fn set_config_value(key, value) {
        set_global("config_" + key, value)
    }
}
