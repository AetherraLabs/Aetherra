{
  "sample_plugin": [
    {
      "plugin_id": "sample_plugin",
      "version": "v1.0",
      "code_content": "\ndef process_data(data):\n    # This function needs improvement\n    result = []\n    for i in range(len(data)):\n        if data[i] > 0:\n            result.append(data[i] * 2)\n        else:\n            result.append(0)\n    return result\n\ndef calculate_average(numbers):\n    # Basic function that could use better error handling\n    return sum(numbers) / len(numbers)\n\nclass DataProcessor:\n    def __init__(self):\n        self.data = []\n    \n    def add_data(self, value):\n        self.data.append(value)\n    \n    def process_all(self):\n        return process_data(self.data)\n",
      "metadata": {
        "lines_of_code": 25,
        "function_count": 5,
        "class_count": 1,
        "import_count": 0,
        "comment_lines": 2
      },
      "metrics": {
        "complexity_score": 1.9,
        "documentation_ratio": 0.10526315789473684,
        "code_density": 22.88
      },
      "timestamp": 1752445600.077041,
      "reason_for_change": "Testing autonomous improvement",
      "change_type": "improvement",
      "confidence_score": 0.85
    },
    {
      "plugin_id": "sample_plugin",
      "version": "v2.0",
      "code_content": "\nfrom typing import List, Union\n\ndef process_data(data: List[Union[int, float]]) -> List[Union[int, float]]:\n    \"\"\"\n    Process a list of numbers by doubling positive values and setting negatives to zero.\n    \n    Args:\n        data: List of numbers to process\n        \n    Returns:\n        List of processed numbers\n    \"\"\"\n    if not data:\n        return []\n    \n    result = []\n    for value in data:\n        if value > 0:\n            result.append(value * 2)\n        else:\n            result.append(0)\n    return result\n\ndef calculate_average(numbers: List[Union[int, float]]) -> float:\n    \"\"\"\n    Calculate the average of a list of numbers.\n    \n    Args:\n        numbers: List of numbers\n        \n    Returns:\n        The average value\n        \n    Raises:\n        ValueError: If the list is empty\n        TypeError: If the list contains non-numeric values\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Cannot calculate average of empty list\")\n    \n    try:\n        return sum(numbers) / len(numbers)\n    except TypeError as e:\n        raise TypeError(\"All values must be numeric\") from e\n\nclass DataProcessor:\n    \"\"\"A class for processing numerical data.\"\"\"\n    \n    def __init__(self):\n        self.data: List[Union[int, float]] = []\n    \n    def add_data(self, value: Union[int, float]) -> None:\n        \"\"\"Add a value to the data collection.\"\"\"\n        if not isinstance(value, (int, float)):\n            raise TypeError(\"Value must be numeric\")\n        self.data.append(value)\n    \n    def process_all(self) -> List[Union[int, float]]:\n        \"\"\"Process all data in the collection.\"\"\"\n        return process_data(self.data)\n",
      "metadata": {
        "lines_of_code": 62,
        "function_count": 5,
        "class_count": 2,
        "import_count": 1,
        "comment_lines": 0
      },
      "metrics": {
        "complexity_score": 4.7,
        "documentation_ratio": 0.0,
        "code_density": 26.56451612903226
      },
      "timestamp": 1752445600.1017325,
      "reason_for_change": "Applied autonomous improvements",
      "change_type": "improvement",
      "confidence_score": 0.9
    }
  ],
  "demo_code": [
    {
      "plugin_id": "demo_code",
      "version": "v1.0",
      "code_content": "\ndef process_user_data(data):\n    result = []\n    for item in data:\n        if item[\"age\"] > 18:\n            result.append(item[\"name\"].upper())\n    return result\n\ndef calculate_total(prices):\n    total = 0\n    for price in prices:\n        total += price\n    return total\n",
      "metadata": {
        "lines_of_code": 14,
        "function_count": 2,
        "class_count": 0,
        "import_count": 0,
        "comment_lines": 0
      },
      "metrics": {
        "complexity_score": 1.1,
        "documentation_ratio": 0.0,
        "code_density": 19.428571428571427
      },
      "timestamp": 1752445737.1216502,
      "reason_for_change": "Live demo improvement",
      "change_type": "quality_improvement",
      "confidence_score": 0.75
    },
    {
      "plugin_id": "demo_code",
      "version": "v2.0",
      "code_content": "\nfrom typing import List, Dict, Any, Union\n\ndef process_user_data(data: List[Dict[str, Any]]) -> List[str]:\n    \"\"\"\n    Process user data and return names of adult users in uppercase.\n    \n    Args:\n        data: List of user dictionaries with 'age' and 'name' keys\n        \n    Returns:\n        List of uppercase names for users over 18\n        \n    Raises:\n        KeyError: If required keys are missing\n        TypeError: If data is not in expected format\n    \"\"\"\n    if not data:\n        return []\n    \n    result = []\n    for item in data:\n        try:\n            if item[\"age\"] > 18:\n                result.append(item[\"name\"].upper())\n        except (KeyError, TypeError) as e:\n            raise ValueError(f\"Invalid user data format: {e}\")\n    \n    return result\n\ndef calculate_total(prices: List[Union[int, float]]) -> float:\n    \"\"\"\n    Calculate the total sum of a list of prices.\n    \n    Args:\n        prices: List of numeric price values\n        \n    Returns:\n        Sum of all prices\n        \n    Raises:\n        TypeError: If prices contains non-numeric values\n    \"\"\"\n    if not prices:\n        return 0.0\n    \n    try:\n        return sum(prices)\n    except TypeError as e:\n        raise TypeError(\"All prices must be numeric\") from e\n",
      "metadata": {
        "lines_of_code": 51,
        "function_count": 2,
        "class_count": 0,
        "import_count": 1,
        "comment_lines": 0
      },
      "metrics": {
        "complexity_score": 3.8,
        "documentation_ratio": 0.0,
        "code_density": 24.58823529411765
      },
      "timestamp": 1752445737.1403463,
      "reason_for_change": "Applied autonomous improvements",
      "change_type": "quality_improvement",
      "confidence_score": 0.95
    }
  ]
}