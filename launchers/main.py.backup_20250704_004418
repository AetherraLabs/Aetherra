#!/usr/bin/env python3
"""
Lyrixa - AI-Native Programming Language
Main entry point for the Lyrixa interpreter
"""

import os
import sys

# Add the current directory to the Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# Use Enhanced Interpreter for best AI-native experience
try:
    from core.enhanced_interpreter import EnhancedAetherraInterpreter

    use_enhanced = True
except ImportError:
    from core.interpreter import AetherraInterpreter

    use_enhanced = False


def main():
    """Main entry point for Lyrixa"""
    if use_enhanced:
        print("üîÆ Lyrixa - Enhanced AI-Native Programming Language")
        print("üöÄ Enhanced mode: Natural language programming enabled!")
        interpreter = EnhancedAetherraInterpreter()
    else:
        print("üß† Lyrixa - AI-Native Programming Language")
        print("‚ö†Ô∏è  Basic mode: Enhanced features not available")
        interpreter = AetherraInterpreter()

    print("=" * 50)
    print("Type commands or 'help' for assistance")
    print("Type 'exit' or press Ctrl+C to quit")
    if use_enhanced:
        print("üí° Try: 'create a REST API' or 'ai: explain Aetherra'")
    print("=" * 50)

    while True:
        try:
            try:
                code = input("üîÆ >> ")
            except EOFError:
                print("\nüöÄ Input stream closed. Thanks for using Lyrixa!")
                break

            if code.lower() in ["exit", "quit", "q"]:
                print("üöÄ Thanks for using Lyrixa!")
                break
            elif code.lower() in ["help", "?"]:
                print("""
üìã Lyrixa Commands:
  remember('text') as 'tag'    - Store memory with tag
  recall tag: 'tag'            - Recall memories by tag
  memory summary               - Show memory statistics
  define func() ... end        - Define function
  run func()                   - Execute function
  agent goal: 'description'    - Set AI agent goal
  simulate ... end             - Simulation mode
  help                         - Show this help
  exit                         - Quit interpreter
                """)
                continue
            elif code.strip() == "":
                continue

            # Execute based on interpreter type
            if use_enhanced:
                result = interpreter.execute_aether(code)
            else:
                result = interpreter.execute(code)

            if result:
                print(result)
        except KeyboardInterrupt:
            print("\nüöÄ Thanks for using Lyrixa!")
            break
        except Exception as e:
            print(f"‚ùå Error: {e}")


if __name__ == "__main__":
    main()


if __name__ == "__main__":
    sys.exit(main())
