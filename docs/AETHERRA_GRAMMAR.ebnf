# Aetherra Formal Grammar Specification
# EBNF (Extended Backus-Naur Form) Grammar for Aetherra Language
# Version: 3.0
# Date: 2024-12-27

# ====================================================================
# PROGRAM STRUCTURE
# ====================================================================

program := statement_list EOF

statement_list := statement*

statement := goal_statement
           | identity_statement
           | memory_statement
           | consciousness_statement
           | voice_statement
           | agent_statement
           | when_statement
           | if_statement
           | for_statement
           | while_statement
           | function_definition
           | intent_action
           | assignment
           | expression_statement
           | comment
           | NEWLINE

# ====================================================================
# GOAL SYSTEM
# ====================================================================

goal_statement := "goal" ":" value goal_modifiers?

goal_modifiers := goal_modifier+

goal_modifier := priority_clause
               | deadline_clause
               | condition_clause

priority_clause := "priority" ":" priority_level
priority_level := "critical" | "high" | "medium" | "low"

deadline_clause := "deadline" ":" string_literal

condition_clause := "when" condition

# ====================================================================
# IDENTITY SYSTEM
# ====================================================================

identity_statement := "identity" "{" identity_properties "}"

identity_properties := identity_property*

identity_property := property_name ":" value NEWLINE?

property_name := IDENTIFIER | "name" | "version" | "personality" | "traits" | "capabilities"

# ====================================================================
# MEMORY SYSTEM
# ====================================================================

memory_statement := memory_remember
                  | memory_recall
                  | memory_search
                  | memory_forget
                  | memory_consolidate
                  | memory_pattern

memory_remember := "remember" "(" string_literal ")" memory_modifiers?

memory_recall := "recall" string_literal memory_modifiers?

memory_search := "memory" "." "search" "(" string_literal ")"

memory_forget := "forget" string_literal

memory_consolidate := "consolidate" "(" condition? ")"

memory_pattern := "memory" "." "pattern" "(" string_literal ("," pattern_options)? ")"

memory_modifiers := memory_modifier+

memory_modifier := "as" string_literal
                 | "since" string_literal
                 | "in" "category" string_literal

pattern_options := "frequency" "=" string_literal

# ====================================================================
# CONSCIOUSNESS SYSTEM
# ====================================================================

consciousness_statement := "consciousness" "{" consciousness_properties "}"

consciousness_properties := consciousness_property*

consciousness_property := "self_awareness" ":" number_literal
                        | "meta_cognition" ":" number_literal
                        | "introspection" ":" number_literal
                        | "reflection_depth" ":" number_literal

# ====================================================================
# VOICE AND PERSONALITY
# ====================================================================

voice_statement := "voice" "{" voice_properties "}"

voice_properties := voice_property*

voice_property := "tone" ":" string_literal
                | "formality" ":" number_literal
                | "enthusiasm" ":" number_literal
                | "conciseness" ":" number_literal

# ====================================================================
# AGENT SYSTEM
# ====================================================================

agent_statement := agent_mode_set
                 | agent_control
                 | agent_goal_management

agent_mode_set := "agent" "." "mode" "=" string_literal

agent_control := "agent" "." agent_action "(" ")"

agent_action := "start" | "stop" | "pause" | "resume" | "status"

agent_goal_management := "agent" "." goal_action "(" goal_args? ")"

goal_action := "add_goal" | "remove_goal" | "clear_goals" | "list_goals"

goal_args := string_literal ("," goal_priority)?

goal_priority := "priority" "=" priority_level

# ====================================================================
# CONTROL FLOW
# ====================================================================

when_statement := "when" condition ":" NEWLINE block

if_statement := "if" condition ":" NEWLINE block else_clause?

else_clause := "else" ":" NEWLINE block

for_statement := "for" IDENTIFIER "in" expression ":" NEWLINE block

while_statement := "while" condition ":" NEWLINE block

block := INDENT statement_list DEDENT

# ====================================================================
# FUNCTIONS
# ====================================================================

function_definition := "define" IDENTIFIER "(" parameter_list? ")" ":" NEWLINE block

parameter_list := IDENTIFIER ("," IDENTIFIER)*

function_call := "run" IDENTIFIER "(" argument_list? ")"

argument_list := expression ("," expression)*

# ====================================================================
# INTENT ACTIONS
# ====================================================================

intent_action := intent_verb intent_target intent_modifiers?

intent_verb := "think" | "analyze" | "optimize" | "learn" | "investigate"
             | "suggest" | "reflect" | "adapt" | "evolve" | "process"
             | "understand" | "create" | "modify" | "delete" | "search"

intent_target := ("about" | "for" | "from" | "on")? value

intent_modifiers := intent_modifier+

intent_modifier := "with" value
                 | "using" value
                 | "through" value

# ====================================================================
# EXPRESSIONS
# ====================================================================

assignment := IDENTIFIER "=" expression

expression_statement := expression

expression := logical_or

logical_or := logical_and ("or" logical_and)*

logical_and := equality ("and" equality)*

equality := comparison (("==" | "!=") comparison)*

comparison := addition (("<" | ">" | "<=" | ">=") addition)*

addition := multiplication (("+" | "-") multiplication)*

multiplication := unary (("*" | "/" | "%") unary)*

unary := ("not" | "-" | "+") unary | primary

primary := "(" expression ")"
         | function_call
         | member_access
         | IDENTIFIER
         | literal

member_access := IDENTIFIER ("." IDENTIFIER)+

condition := expression

# ====================================================================
# LITERALS
# ====================================================================

value := literal | IDENTIFIER | expression

literal := string_literal
         | number_literal
         | boolean_literal
         | list_literal
         | dict_literal

string_literal := ESCAPED_STRING

number_literal := NUMBER ("%")?

boolean_literal := "true" | "false"

list_literal := "[" (expression ("," expression)*)? "]"

dict_literal := "{" (dict_pair ("," dict_pair)*)? "}"

dict_pair := (IDENTIFIER | string_literal) ":" expression

# ====================================================================
# COMMENTS
# ====================================================================

comment := single_line_comment | multi_line_comment

single_line_comment := "#" /[^\n]*/

multi_line_comment := "/*" /(.|\n)*?/ "*/"

# ====================================================================
# TERMINALS
# ====================================================================

%import common.ESCAPED_STRING
%import common.NUMBER
%import common.WS
%import common.NEWLINE

IDENTIFIER := /[a-zA-Z_][a-zA-Z0-9_]*/

INDENT := /(?<=\n)[ \t]+/
DEDENT := // Handled by indentation processor

%ignore WS
%ignore single_line_comment
%ignore multi_line_comment

# ====================================================================
# RESERVED KEYWORDS
# ====================================================================

# Core language keywords:
# goal, identity, consciousness, memory, voice, agent, when, if, else, end,
# define, run, remember, recall, forget, consolidate, think, analyze, optimize,
# learn, investigate, suggest, reflect, adapt, evolve, speak, priority,
# high, medium, low, critical, true, false, on, off, mode, start, stop,
# status, add_goal, clear_goals, remove_goal, list_goals, pause, resume,
# as, since, in, category, search, pattern, frequency, about, for, from, on,
# with, using, through, and, or, not, deadline, when

# System properties:
# name, version, personality, traits, capabilities, self_awareness,
# meta_cognition, introspection, reflection_depth, tone, formality,
# enthusiasm, conciseness
