name: üß† Aetherra Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  code-quality:
    name: üîç Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: üì¶ Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: üîß Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 mypy black isort bandit safety
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements/dev.txt ]; then pip install -r requirements/dev.txt; fi

      - name: üé® Format check with Black
        run: black --check --diff *.py Aetherra/ scripts/ --exclude="unused|backup|archive"

      - name: üìè Import sorting with isort
        run: isort --check-only --diff *.py Aetherra/ scripts/ --skip-glob="*/unused/*" --skip-glob="*/backup/*"

      - name: üîç Lint with flake8
        run: |
          # Critical errors only first
          flake8 *.py Aetherra/ scripts/ --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=unused,backup,archive
          # Full lint with relaxed settings
          flake8 *.py Aetherra/ scripts/ --count --max-complexity=12 --max-line-length=120 --exclude=unused,backup,archive --exit-zero

      - name: üîí Security scan with bandit
        run: bandit -r *.py Aetherra/ -ll --exclude=*/unused/*,*/backup/*,*/archive/*

      - name: üõ°Ô∏è Dependency vulnerability check
        run: safety check --ignore 70612  # Ignore false positives if any

  test-matrix:
    name: üß™ Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.10', '3.11']

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock pytest-asyncio
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: üß™ Run unit tests
        run: |
          pytest tests/unit/ -v --cov=*.py Aetherra/aetherra --cov-report=xml --cov-report=term-missing

      - name: üîó Run integration tests
        run: |
          pytest tests/integration/ -v --tb=short

      - name: üìä Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          fail_ci_if_error: false

  aetherra-specific-tests:
    name: üöÄ Aetherra System Tests
    runs-on: ubuntu-latest
    needs: [code-quality]

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: üì¶ Install Aetherra dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flask flask-socketio psutil numpy pandas
          # Install quantum dependencies if available
          pip install qiskit cirq || echo "Quantum deps optional"

      - name: üß† Test Lyrixa Core Components
        run: |
          python -c "
          import sys
          sys.path.insert(0, '.')

          # Test core imports
          try:
              from Aetherra.lyrixa.conversation_manager import ConversationManager
              print('‚úÖ ConversationManager imports successfully')
          except Exception as e:
              print(f'‚ùå ConversationManager import failed: {e}')

          try:
              from Aetherra.lyrixa.gui.web_interface_server import AetherraWebInterface
              print('‚úÖ WebInterface imports successfully')
          except Exception as e:
              print(f'‚ùå WebInterface import failed: {e}')
          "

      - name: üåê Test Web Interface
        run: |
          timeout 30 python Aetherra/lyrixa/gui/web_interface_server.py &
          WEB_PID=$!
          sleep 10
          curl -f http://localhost:8686 || echo "Web interface test needs attention"
          kill $WEB_PID || true

      - name: üîß Test Memory System
        run: |
          python -c "
          try:
              from Aetherra.lyrixa.memory.lyrixa_memory_engine import LyrixaMemoryEngine
              print('‚úÖ Memory engine imports successfully')

              # Basic functionality test
              from Aetherra.lyrixa.memory.lyrixa_memory_engine import MemorySystemConfig
              config = MemorySystemConfig()
              memory = LyrixaMemoryEngine(config)
              print('‚úÖ Memory engine instantiates successfully')
          except Exception as e:
              print(f'‚ùå Memory system test failed: {e}')
          "

  syntax-validation:
    name: üîç Syntax Validation
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: üîß Validate Python syntax
        run: |
          python -m py_compile $(find . -name "*.py" -not -path "./unused/*" -not -path "./backup/*" -not -path "./.venv/*") || true

      - name: üìã Generate syntax report
        run: |
          echo "## Syntax Validation Report" > syntax_report.md
          echo "Generated on: $(date)" >> syntax_report.md
          echo "" >> syntax_report.md

          SYNTAX_ERRORS=0
          for file in $(find . -name "*.py" -not -path "./unused/*" -not -path "./backup/*" -not -path "./.venv/*"); do
            if ! python -m py_compile "$file" 2>/dev/null; then
              echo "‚ùå $file" >> syntax_report.md
              SYNTAX_ERRORS=$((SYNTAX_ERRORS + 1))
            fi
          done

          echo "" >> syntax_report.md
          echo "Total syntax errors: $SYNTAX_ERRORS" >> syntax_report.md

          if [ $SYNTAX_ERRORS -gt 10 ]; then
            echo "‚ö†Ô∏è Too many syntax errors ($SYNTAX_ERRORS), please review codebase"
            exit 1
          fi

      - name: üì§ Upload syntax report
        uses: actions/upload-artifact@v3
        with:
          name: syntax-report
          path: syntax_report.md
